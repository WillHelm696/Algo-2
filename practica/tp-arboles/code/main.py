from avltree import *

def print_tree_by_level(node):
    if node != None:
        print(node.value,"-bf:",node.bf,"-h:",node.height,"-cnt:",node.count,",")
        print_tree_by_level(node.leftnode)
        print_tree_by_level(node.rightnode)

print("arboles binarios de busqueda")
B=AVLTree()
print("Arbol B")
insert(B,"E",5)
print(print_tree_by_level(B.root))
insert(B,"C",3)
print(print_tree_by_level(B.root))
insert(B,"B",2)
print(print_tree_by_level(B.root))
insert(B,"A",1)
print(print_tree_by_level(B.root))
insert(B,"D",4)
print(print_tree_by_level(B.root))
insert(B,"G",7)
print(print_tree_by_level(B.root))
insert(B,"F",6)
print(print_tree_by_level(B.root))
print("AVL calculateBAlance-----------------------------------------------------------")
calculateBalance(B)
print(print_tree_by_level(B.root))
print("AVL delete F")
deleteKey(B,6)
print(print_tree_by_level(B.root))
###############################
Tree=AVLTree()
insert(Tree,"A",0),insert(Tree,"C",2),insert(Tree,"B",1)
print(print_tree_by_level(Tree.root))
recalculate_fb(Tree)
reBalance(Tree)
print(print_tree_by_level(Tree.root))